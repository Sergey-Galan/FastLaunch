#!/bin/sh

MessageFTP()
{
lan=`defaults read -g AppleLocale | cut -d "_" -f1`

if [[ "$lan" = "ru" ]]; then
echo "Info:Не удается установить связь с FTP-сервером"

elif [[ "$lan" = "uk" ]]; then
echo "Info:Неможливо встановити зв'язок з FTP-сервером"
else
echo "Info:Unable to communicate with FTP-server"
fi

}


MessageFileFTP()
{
lan=`defaults read -g AppleLocale | cut -d "_" -f1`

if [[ "$lan" = "ru" ]]; then
echo "Info:Файл с таким названием есть на сервере"

elif [[ "$lan" = "uk" ]]; then
echo "Info:Файл з такою назвою є на сервері"
else
echo "Info:There is a file with the same name on the server"
fi

}


MessageTempfiles()
{
lan=`defaults read -g AppleLocale | cut -d "_" -f1`

if [[ "$lan" = "ru" ]]; then
echo "Info:Видеофайл в процессе кодирования, следует подождать $duration3 из $duration1"

elif [[ "$lan" = "uk" ]]; then
echo "Info:Відеофайл в процесі кодування, слід почекати $duration3 з $duration1"
else
echo "Info:Video file in the course of encoding, it is necessary to wait $duration3 of $duration1"
fi

}


Transcoding()
{
  duration2="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -d '.' -f1)"
  h="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -c1,2)"
  m="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -c4,5)"
  s="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -c7,8)"
  ms="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -c10,11)"


  if [[ "H.264 (x264)" = "$VEncoder" ]]; then
  cod2="H.264"
  cod="H.264 AVC"
#  aspect=`./tools/mediainfo --Inform="Video;%DisplayAspectRatio/String%" "$file"`
echo "Info:"$count" Start encoding file... to H.264"
  TranscodingH264 2>&1 |
  OutputFFmpeg
  fi
  if [[ "H.264 Hardware" = "$VEncoder" ]]; then
  cod2="H.264"
  cod="H.264 AVC (VideoToolbox)"
#  aspect=`./tools/mediainfo --Inform="Video;%DisplayAspectRatio/String%" "$file"`
echo "Info:"$count" Start encoding file... to H.264 Hardware (VideoToolbox)"
  TranscodingH264Hardware 2>&1 |
  OutputFFmpeg
  fi
  if [[ "H.265 (x265)" = "$VEncoder" ]]; then
  cod2="H.265"
  cod="H.265 HEVC"
#  aspect=`./tools/mediainfo --Inform="Video;%DisplayAspectRatio/String%" "$file"`
echo "Info:"$count" Start encoding file... in H.265"
  TranscodingH265 2>&1 |
  OutputFFmpeg
  fi
  if [[ "H.265 Hardware" = "$VEncoder" ]]; then
  cod2="H.265"
  cod="H.265 HEVC (VideoToolbox)"
#  aspect=`./tools/mediainfo --Inform="Video;%DisplayAspectRatio/String%" "$file"`
echo "Info:"$count" Start encoding file... to H.265 Hardware (VideoToolbox)"
  TranscodingH265Hardware 2>&1 |
  OutputFFmpeg
  fi
  
echo "Info:Encoding... done"
sleep 1

}


TranscodingH264()
{

if  [[ "$(./tools/ffmpeg -i "$file" -hide_banner 2>&1 | grep -e 'aist#0:1')" ]]; then
    echo "Guessed Channel Layout for Input Stream #0.1"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -map 0:0 $Interlaced -alternate_scan 1 -f mp4 $FrameRate -c:v libx264 -preset $Preset -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -c:a $AEncoder -ar $SampleRate -filter_complex "[0:1][0:2]amerge=inputs="$Channels"[aout]" -map "[aout]" -b:a $ABitRate "$DestinationFolder/$file_end.part"
elif [[ "$(./tools/ffmpeg -i "$file" -hide_banner 2>&1 | grep -e 'aist#0:2')" ]]; then
    echo "Guessed Channel Layout for Input Stream #0.2"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -map 0:0 $Interlaced -alternate_scan 1 -f mp4 $FrameRate -c:v libx264 -preset $Preset -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -c:a $AEncoder -ar $SampleRate -filter_complex "[0:2][0:3]amerge=inputs="$Channels"[aout]" -map "[aout]" -b:a $ABitRate "$DestinationFolder/$file_end.part"
    else
    echo "audio map... OK"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" $Interlaced -alternate_scan 1 -f mp4 $FrameRate -c:v libx264 -preset $Preset -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -c:a $AEncoder -ar $SampleRate -ac $Channels -b:a $ABitRate "$DestinationFolder/$file_end.part"
fi

}


TranscodingH264Hardware()
{

if  [[ "$(./tools/ffmpeg -i "$file" -hide_banner 2>&1 | grep -e 'aist#0:1')" ]]; then
    echo "Guessed Channel Layout for Input Stream #0.1"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -map 0:0 -alternate_scan 1 -f mp4 $FrameRate -c:v h264_videotoolbox -allow_sw 1 $Resolution $VBitRate -aspect $AspectRatio -c:a $AEncoder -ar $SampleRate -filter_complex "[0:1][0:2]amerge=inputs="$Channels"[aout]" -map "[aout]" -b:a $ABitRate "$DestinationFolder/$file_end.part"
elif [[ "$(./tools/ffmpeg -i "$file" -hide_banner 2>&1 | grep -e 'aist#0:2')" ]]; then
    echo "Guessed Channel Layout for Input Stream #0.2"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -map 0:0 -alternate_scan 1 -f mp4 $FrameRate -c:v h264_videotoolbox -allow_sw 1 $Resolution $VBitRate -aspect $AspectRatio -c:a $AEncoder -ar $SampleRate -filter_complex "[0:2][0:3]amerge=inputs="$Channels"[aout]" -map "[aout]" -b:a $ABitRate "$DestinationFolder/$file_end.part"
    else
    echo "audio map... OK"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -alternate_scan 1 -f mp4 $FrameRate -c:v h264_videotoolbox -allow_sw 1 $Resolution $VBitRate -aspect $AspectRatio -c:a $AEncoder -ar $SampleRate -ac $Channels -b:a $ABitRate "$DestinationFolder/$file_end.part"
fi

}


TranscodingH265()
{
if  [[ "$(./tools/ffmpeg -i "$file" -hide_banner 2>&1 | grep -e 'aist#0:1')" ]]; then
    echo "Guessed Channel Layout for Input Stream #0.1"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -map 0:0 -f mp4 $FrameRate -c:v libx265 -tag:v hvc1 -preset $Preset -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -x265-params log-level=error -c:a $AEncoder -ar $SampleRate -filter_complex "[0:1][0:2]amerge=inputs="$Channels"[aout]" -map "[aout]" -b:a $ABitRate "$DestinationFolder/$file_end.part"
elif [[ "$(./tools/ffmpeg -i "$file" -hide_banner 2>&1 | grep -e 'aist#0:2')" ]]; then
    echo "Guessed Channel Layout for Input Stream #0.2"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -map 0:0 -f mp4 $FrameRate -c:v libx265 -tag:v hvc1 -preset $Preset -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -x265-params log-level=error -c:a $AEncoder -ar $SampleRate -filter_complex "[0:2][0:3]amerge=inputs="$Channels"[aout]" -map "[aout]" -b:a $ABitRate "$DestinationFolder/$file_end.part"
    else
    echo "audio map... OK"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -f mp4 $FrameRate -c:v libx265 -tag:v hvc1 -preset $Preset -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -x265-params log-level=error -c:a $AEncoder -ar $SampleRate -ac $Channels -b:a $ABitRate "$DestinationFolder/$file_end.part"
fi

}


TranscodingH265Hardware()
{
if  [[ "$(./tools/ffmpeg -i "$file" -hide_banner 2>&1 | grep -e 'aist#0:1')" ]]; then
    echo "Guessed Channel Layout for Input Stream #0.1"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -map 0:0 -f mp4 $FrameRate -c:v hevc_videotoolbox -allow_sw 1 -tag:v hvc1 -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -x265-params log-level=error -c:a $AEncoder -ar $SampleRate -filter_complex "[0:1][0:2]amerge=inputs="$Channels"[aout]" -map "[aout]" -b:a $ABitRate "$DestinationFolder/$file_end.part"
elif [[ "$(./tools/ffmpeg -i "$file" -hide_banner 2>&1 | grep -e 'aist#0:2')" ]]; then
    echo "Guessed Channel Layout for Input Stream #0.2"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -map 0:0 -f mp4 $FrameRate -c:v hevc_videotoolbox -allow_sw 1 -tag:v hvc1 -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -x265-params log-level=error -c:a $AEncoder -ar $SampleRate -filter_complex "[0:2][0:3]amerge=inputs="$Channels"[aout]" -map "[aout]" -b:a $ABitRate "$DestinationFolder/$file_end.part"
    else
    echo "audio map... OK"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -f mp4 $FrameRate -c:v hevc_videotoolbox -allow_sw 1 -tag:v hvc1 -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -x265-params log-level=error -c:a $AEncoder -ar $SampleRate -ac $Channels -b:a $ABitRate "$DestinationFolder/$file_end.part"
fi

}

OutputFFmpeg()
{
echo y | ./tools/ffmpeg -ss 00:00:02 -i "$file" -s 320x180 -frames:v 1 -q:v 5 /private/tmp/img.jpg 2>/dev/null &
echo "ONLY:RED"
echo "Progress:0% " &
echo "Files:file://"$file"" &
while IFS= read -d $'\r' -r p; do
  echo "$p"
  fps=${p/' q='*/}
  fps=${fps/*'fps= '/}
  fps=${fps/*'fps='/}
  size="$(./tools/mediainfo --Inform="General;%FileSize/String%" "$DestinationFolder/$file_end.part")"
  size=${size/' '/}
  size=${size/' '/}
  size=${size/'i'*/}
  speed=${p/*speed=/}
  speed=${speed%'x'*}
  speed=${speed/* /}
  speed=${speed:(0):(4)}
  tm=${p/*time=/}
  tm=${tm/ *}
  mss=${tm/*./}
  mss=${mss/' '*/}
  tm=${tm/.*}
  hh=${tm/:*/}
  ss=${tm/*:/}
  mm=${tm%':'*}
  mm=${mm/*:/}

prtth=$(expr $hh \* 3600 2>/dev/null);
prttm=$(expr $mm \* 60 2>/dev/null);
prtt=$(expr $prtth + $prttm + $ss 2>/dev/null)

prth=$(expr $h \* 3600 2>/dev/null);
prtm=$(expr $m \* 60 2>/dev/null);
prt=$(expr $prth + $prtm + $s 2>/dev/null)

pr=$(expr "$prtt""$mss"00 / "$prt""$ms" 2>/dev/null)

tl=$(expr "$prt" - "$prtt" 2>/dev/null);
#tl=`echo "$tl" "$speed" | awk '{print $1/$2}'`;
#tl=${tl/.*/}
tl=$(echo 'scale = 0 ; '$tl' / '$speed'' | bc 2>/dev/null);
    ((tlh=${tl}/3600)) 2>/dev/null
    ((tlm=(${tl}%3600)/60)) 2>/dev/null
    ((tls=${tl}%60)) 2>/dev/null
tl=$(printf "%02d:%02d:%02d\n" $tlh $tlm $tls)
echo "Seconds:$prtt.$mss"

if [[ -n "$pr" ]] && [[ "$pr" -ge 0 ]]; then

echo "Progress:$pr% "
echo "FPS:""FPS:              $fps"
echo "Size:""Size:             $size"
echo "Time:""Time:            $tl"
echo "Speed:""Speed:          $speed""x"
echo "Duration:""Duration:      $tm of $duration2"

fi
echo "Name:$file_end.mp4"
done
size="$(./tools/mediainfo --Inform="General;%FileSize/String%" "$DestinationFolder/$file_end.part")"
size=${size/' '/}
size=${size/' '/}
size=${size/'i'*/}

echo "Seconds:$prt"
echo "Progress:100% "
echo "FPS:""FPS:              $fps"
echo "Size:""Size:             $size"
echo "Time:""Time:            $tl"
echo "Speed:""Speed:          $speed""x"
echo "Duration:""Duration:      $duration2 of $duration2"

}


XML()
{
uuid=`uuidgen`
  out=$(($(wc -c < "/private/tmp/FastLaunch/$file_end.mp4")))
  filename_xml="/private/tmp/FastLaunch/$file_end.mp4"
  MD5=$(md5 "$filename_xml"); MD5=${MD5/* /}
  echo "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>
  <message uuid=\""$uuid"\" id=\""$file_end.mp4"\">
  <envelope sent=\""$(date)"\" subject=\""$file_end.mp4"\">
  <to>
  <account address=\"From FastLaunch\" personal=\"\" />
  </to>
  <from>
  FastLaunch $ScriptVersion
  <account personal=\"FastLaunch: FFMPEG\" network-address=\"`hostname -f`\" />
  </from>
  </envelope>
  <parcel>
  <content name=\""$file_end.mp4"\" type=\"movie\">
  <file name=\""$file_end.mp4"\" path=\""$sr$file_end.mp4"\" size=\""$out"\" version=\"original\" md5=\"$MD5\">
  <protocol>
  <connection />
  </protocol>
  <container>
  <codec uuid=\"00000000-0000-0000-0000-000000000000\" />
  </container>
  </file>
  </content>
  </parcel>
  </message>" > $filename_xml.xml

}


Time()
{
finishTime=$(date -u "+%s")
processedTime=$(expr $finishTime - $startTime)

if [[ $processedTime -gt 3599 ]]; then
    processedTime=$(printf "%dh%dm%ds\n" $((processedTime/3600%3600)) $((processedTime/60%60)) $((processedTime%60)))

elif [[ $processedTime -gt 59 ]]; then
    processedTime=$(printf "%dm%ds\n" $((processedTime/60%60)) $((processedTime%60)))
 else
    processedTime=$(printf "%ds\n" $((processedTime)))
fi

}


Tempfiles()
{
duration1="$(./tools/mediainfo --Inform="General;%Duration/String3%" "$file" | cut -d '.' -f1)"
duration3="$(./tools/mediainfo --Inform="Video;%Duration/String3%" "$file" | cut -d '.' -f1)"
duration4="$(./tools/mediainfo --Inform="Audio;%Duration/String3%" "$file" | cut -d '.' -f1)"
duration2="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -d '.' -f1)"

until [[ "$duration1" = "$duration3" ]] || [[ "$duration1" = "$duration4" ]] || [[ "$duration1" = "$duration2" ]] && [[ "$duration2" ]]
do
duration1="$(./tools/mediainfo --Inform="General;%Duration/String3%" "$file" | cut -d '.' -f1)"
duration2="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -d '.' -f1)"
duration4="$(./tools/mediainfo --Inform="Audio;%Duration/String3%" "$file" | cut -d '.' -f1)"
duration3="$(./tools/mediainfo --Inform="Video;%Duration/String3%" "$file" | cut -d '.' -f1)"
MessageTempfiles
sleep 2
done
sleep 1

}


DetectFTP()
{

if curl --max-time 4 -s -I -v "$sr" --user "$un":"$ps" &> /dev/null; then
echo "Info:Detect... $sr... OK"
      else
MessageFTP
afplay sound/Cartoon1.mp3 &> /dev/null
exit
fi

}


TestFileFTP()
{

if curl --max-time 4 -s -I "$sr"/"$file_end.mp4" --user "$un":"$ps" &> /dev/null; then
MessageFileFTP
afplay sound/Cartoon1.mp3 &> /dev/null
exit
fi

}


StartFTP()
{

echo "ONLY:GREY"
echo "Progress:0% "
files="/private/tmp/FastLaunch/$file_end.mp4"
echo "Seconds:0"
  size="$(./tools/mediainfo --Inform="General;%FileSize/String%" "$files")"
  size=${size/' '/}
  size=${size/' '/}
  size=${size/'i'*/}
  h="$(./tools/ffmpeg -i "$files" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -c1,2)"
  m="$(./tools/ffmpeg -i "$files" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -c4,5)"
  s="$(./tools/ffmpeg -i "$files" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -c7,8)"
  ms="$(./tools/ffmpeg -i "$files" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -c10,11)"
  prth=$(expr $h \* 3600 2>/dev/null);
  prtm=$(expr $m \* 60 2>/dev/null);
  prt=$(expr $prth + $prtm + $s 2>/dev/null)
  echo "ONLY:BLUE"
  
until curl -C - -T "$files" "$sr" --user "$un":"$ps"; do
sleep 1
done 2>&1 |

while IFS= read -d $'\r' -r p; do
  pr=${p:(0):(3)}
  pr=${pr%'**'*}
  sh=${p:(25):(6)}
  sh=${sh%'byte'*}
  sh=${sh/* /}
  tm=${p:(64):(8)}
  tm=${tm%'d % Xfe'*}
  tm=${tm/' '/}
  tms=${p:(55):(8)}
  tms=${tms/* /}
  sp=${p:(72):(6)}
  sp=${sp%'rd'*}
  sp=${sp/* /}
  s=$(echo 'scale = 2 ; '$prt' / '100' * '$pr'' | bc 2>/dev/null);
  echo "$p"

if [[ `"$p" 2>&1 | grep -e 'Could not resolve host' ` ]] || [[ `"$p" 2>&1 | grep -e 'Send failure: Broken pipe' ` ]] || [[ `"$p" 2>&1 | grep -e 'server response timeout' ` ]] || [[ `"$p" 2>&1 | grep -e 'Failed to connect' ` ]]; then
MessageFTP
echo "Progress:0% "
echo "Size:""Size:            0 of 0"
echo "Time:""Time:            --:--:-- --:--:--"
echo "Speed:""Speed:          0"
sleep 10

elif [[ -n "$pr" ]]; then
tempfiles="${files##*/}"
echo "Seconds:$s"
#echo "DETAILS:HIDE"
echo "Info:Start sending file to FTP-server... "
echo "Progress:$pr% "
echo "FPS: "
echo "Size:""Size:             $sh of $size"
echo "Time:""Time:            $tms $tm"
echo "Speed:""Speed:          $sp"
echo "Duration: "
fi
done

echo "Size:""Size:             $size of $size"
echo "Progress:100% "
sleep 1
echo "Info:Relocation file to directory FastLaunch... "


in=`echo $(curl --max-time 10 -s -I "$sr$file_end.mp4" --user "$un":"$ps" | tr -d '\r') | cut -d " " -f9`
out=$(($(wc -c < "$DestinationFolder/$file_end.mp4")))

if [[ $XMLfile = 1 ]]; then
  XML # создание XML
  for filexml in "/private/tmp/FastLaunch"/"$file_end.mp4.xml"; do
    until curl -C - -T "$filexml" "$sr" --user "$un":"$ps"; do
    sleep 1
    done
  done
echo "Info:Sending an XML file"
sleep 1
fi

videoduration="$(./tools/ffmpeg -i "$DestinationFolder/$file_end.mp4" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -d '.' -f1)"
Time

if [[ "$out" = "$in" ]]; then
afplay sound/done.mp3 &> /dev/null &
echo "Info:🙂 Complete: Video file  Total processed: $processedTime Time: $(date "+%Y-%m-%d %H:%M:%S %z")"
echo "NOTIFICATION:"$file_end.mp4" Complite 🙂 \r"Duration... $videoduration Size... $size""
else
afplay sound/Cartoon1.mp3 &> /dev/null &
echo "Info:😡 Complete: Video file Error!!!  Total processed: $processedTime Time: $(date "+%Y-%m-%d %H:%M:%S %z")"
echo "NOTIFICATION:"$file_end.mp4" Error!!! 😡 \r"Duration... $videoduration Size... $size""
#rm -rf "/private/tmp/img.jpg" &> /dev/null
rm -rf "/private/tmp/FastLaunch/"* &> /dev/null
exit
fi
#rm -rf "/private/tmp/img.jpg" &> /dev/null
rm -rf "/private/tmp/FastLaunch/"* &> /dev/null
}




##################################################################################
###### Start script execution routine ############################################
##################################################################################

if [[ -f "$file" ]]; then
echo "Progress:0% "

startTime=$(date -u "+%s")

FastLaunchPlist="$HOME/Library/Preferences/org.SerhiiHalan.SettingsFastLaunch.plist" &> /dev/null
XMLfile="$(defaults read $FastLaunchPlist XMLfile)"
Wait="$(defaults read $FastLaunchPlist Wait)"
Interlaced="$(defaults read $FastLaunchPlist Interlaced)"
VEncoder="$(defaults read $FastLaunchPlist VEncoder)"
Resolution="$(defaults read $FastLaunchPlist Resolution)"
Preset="$(defaults read $FastLaunchPlist Preset)"
FrameRate="$(defaults read $FastLaunchPlist FrameRate)"
Chroma="$(defaults read $FastLaunchPlist Chroma)"
AEncoder="$(defaults read $FastLaunchPlist AEncoder)"
ABitRate="$(defaults read $FastLaunchPlist ABitRate)"
SampleRate="$(defaults read $FastLaunchPlist SampleRate)"
Channels="$(defaults read $FastLaunchPlist Channels)"
AspectRatio="$(defaults read $FastLaunchPlist AspectRatio)"
VBitRate="$(defaults read $FastLaunchPlist VBitRate)"
sr="$(defaults read $FastLaunchPlist sr)"
un="$(defaults read $FastLaunchPlist un)"
ps=$(security find-generic-password -a ${USER} -s postftp -w)
if [[ -z "$un" ]] && [[ -z "$ps" ]]; then
un=ftp
ps=ftp
fi

error=""

    if [[ "$Interlaced" = 0 ]]; then
     Interlaced=""
      else
     Interlaced="-flags +ilme+ildct"
   fi

   if [[ "$Resolution" = "Source" ]]; then
    Resolution=""
     else
    Resolution="-s $Resolution"
   fi
   if [[ "$FrameRate" = "Source" ]]; then
    FrameRate=""
     else
    FrameRate="-r $FrameRate"
   fi
   
   if [[ "$VBitRate" = "Auto" ]]; then
   VBitRate=""
   elif [[ "$VBitRate" = "Source" ]]; then
    VBitRate=`./tools/mediainfo --Inform="Video;%BitRate/String%" "$file" | cut -d "b" -f1  | sed s/" "//g`
      if [[ "$VBitRate" = "" ]]; then
       VBitRate=`./tools/mediainfo --Inform="General;%BitRate/String%" "$file" | cut -d "b" -f1  | sed s/" "//g`
      fi
    VBitRate="-b:v $VBitRate"
   else
    VBitRate="-b:v $VBitRate"
   fi

   if [[ "$AspectRatio" = "Source" ]]; then
   AspectRatio="$(./tools/ffmpeg -i "$file" 2>&1 | grep -m1 DAR)"
   AspectRatio=${AspectRatio/*" DAR "/}
   AspectRatio=${AspectRatio/]*/}
   AspectRatio=${AspectRatio/,*/}
   fi
   
tempfile="${file##*/}"
file_end="${tempfile%.*}"
ext="${file##*.}"
if [[ `echo "mov qt mp4 mpg4 mpg mpeg mpe m75 m15 mts mkv mxf 3gp m4v avi wm wmv vfw ts flv webm vob asf asx bin dat dav drv f4v gtp mod moov rm rmvd spl vcd vid 3g2 3gp 3gp2 3gpp 3gpp2 dif swf dv m2v m2p m2t mpegts yuv bsf evo exp hdmov hdv mpv mqv" 2>&1 | grep -i $ext` ]]; then

    echo "Info:FFmpeg `./tools/ffmpeg -i 2>&1 | grep -e 'ffmpeg version' | awk '{ print $2,$3 }'`,   `./tools/mediainfo --version | grep -v 'MediaInfo Command line,'`,   `curl -V | awk '{ print $1,$2 }' | sed '2,$d'`"
    sleep 0.5

    DetectFTP

    file_end=`echo "$file_end" | awk '{ gsub(" ","\_"); print }'` #Замена пробела
    TestFileFTP
    
    if [[ $Wait = 1 ]]; then
    Tempfiles
    fi

    count=$(( $count + 1 ))
    Mfile="$file"
    put=INPUT
    Minfo
    Transcoding
    mv "$DestinationFolder/$file_end.part" "$DestinationFolder/$file_end.mp4"
    Mfile="$DestinationFolder/$file_end.mp4"
    put=OUTPUT
    Minfo
    ln -s "$DestinationFolder/$file_end.mp4" "/private/tmp/FastLaunch/$file_end.mp4"
    StartFTP
   echo "$(date "+%Y-%m-%d %H:%M:%S") $file_end.mp4" >> "$DestinationFolder/report.txt"
    tempfile="${file##*/}"
    file_end="${tempfile%.*}"

   if  [[ "$("$MonitoringFolder"  2>&1  | grep 'Volumes')" ]]; then
   Volumes="$(echo "$MonitoringFolder"  | cut -d '/' -f3)"
   mv "$MonitoringFolder"/"$file_end.$ext" /Volumes/"$Volumes"/.Trashes/501
   else
   mv "$MonitoringFolder"/"$file_end.$ext" "$HOME"/.Trash
   fi
   
   sleep 1
else
   mkdir "$MonitoringFolder/Not video files" &> /dev/null
   mv "$MonitoringFolder"/"$file_end.$ext" "$MonitoringFolder/Not video files/"
echo "Info:"$file_end.$ext" Not a video file"
sleep 1
fi

    #rm -rf "/private/tmp/img.jpg"
for file in "$MonitoringFolder"/*.*; do
break
done

if [[ -f "$file" ]]
then
sleep 1
source scripts/scriptStart
fi
exit
     else
     
echo "Info:Drag video files to process"
exit
fi
exit
