#!/bin/sh

MessageTempfiles()
{
lan=`defaults read -g AppleLocale | cut -d "_" -f1`

if [[ "$lan" = "ru" ]]; then
echo "Info:Видеофайл в процессе кодирования, следует подождать $duration3 из $duration1"

elif [[ "$lan" = "uk" ]]; then
echo "Info:Відеофайл в процесі кодування, слід почекати $duration3 з $duration1"
else
echo "Info:Video file in the course of encoding, it is necessary to wait $duration3 of $duration1"
fi

}


Transcoding()
{
  duration2="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -d '.' -f1)"
  h="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -c1,2)"
  m="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -c4,5)"
  s="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -c7,8)"
  ms="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -c10,11)"


  if [[ "H.264" = "$VEncoder" ]]; then
  cod2="H.264"
  cod="H.264 AVC"
#  aspect=`./tools/mediainfo --Inform="Video;%DisplayAspectRatio/String%" "$file"`
echo "Info:"$count" Start encoding file... to H.264"
  TranscodingH264 2>&1 |
  OutputFFmpeg
  fi
  if [[ "H.265" = "$VEncoder" ]]; then
  cod2="H.265"
  cod="H.265 HEVC"
#  aspect=`./tools/mediainfo --Inform="Video;%DisplayAspectRatio/String%" "$file"`
echo "Info:"$count" Start encoding file... in H.265"
  TranscodingH265 2>&1 |
  OutputFFmpeg
  fi
  
echo "Info:Encoding... done"
}


TranscodingH264()
{

if  [[ "$(./tools/ffmpeg -i "$file" -hide_banner 2>&1 | grep -e 'Guessed Channel Layout for Input Stream #0.1 : mono')" ]]; then
    echo "Guessed Channel Layout for Input Stream #0.1"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -map 0:0 $Interlaced -alternate_scan 1 -f mp4 $FrameRate -c:v libx264 -preset $Preset -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -c:a $AEncoder -ar $SampleRate -filter_complex "[0:1][0:2]amerge=inputs="$Channels"[aout]" -map "[aout]" -b:a $ABitRate "$DestinationFolder/$file_end.part"
elif [[ "$(./tools/ffmpeg -i "$file" -hide_banner 2>&1 | grep -e 'Guessed Channel Layout for Input Stream #0.2 : mono')" ]]; then
    echo "Guessed Channel Layout for Input Stream #0.2"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -map 0:0 $Interlaced -alternate_scan 1 -f mp4 $FrameRate -c:v libx264 -preset $Preset -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -c:a $AEncoder -ar $SampleRate -filter_complex "[0:2][0:3]amerge=inputs="$Channels"[aout]" -map "[aout]" -b:a $ABitRate "$DestinationFolder/$file_end.part"
    else
    echo "audio map... OK"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" $Interlaced -alternate_scan 1 -f mp4 $FrameRate -c:v libx264 -preset $Preset -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -c:a $AEncoder -ar $SampleRate -ac $Channels -b:a $ABitRate "$DestinationFolder/$file_end.part"
fi

}


TranscodingH265()
{
if  [[ "$(./tools/ffmpeg -i "$file" -hide_banner 2>&1 | grep -e 'Guessed Channel Layout for Input Stream #0.1 : mono')" ]]; then
    echo "Guessed Channel Layout for Input Stream #0.1"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -map 0:0 -f mp4 $FrameRate -c:v libx265 -tag:v hvc1 -preset $Preset -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -x265-params log-level=error -c:a $AEncoder -ar $SampleRate -filter_complex "[0:1][0:2]amerge=inputs="$Channels"[aout]" -map "[aout]" -b:a $ABitRate "$DestinationFolder/$file_end.part"
elif [[ "$(./tools/ffmpeg -i "$file" -hide_banner 2>&1 | grep -e 'Guessed Channel Layout for Input Stream #0.2 : mono')" ]]; then
    echo "Guessed Channel Layout for Input Stream #0.2"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -map 0:0 -f mp4 $FrameRate -c:v libx265 -tag:v hvc1 -preset $Preset -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -x265-params log-level=error -c:a $AEncoder -ar $SampleRate -filter_complex "[0:2][0:3]amerge=inputs="$Channels"[aout]" -map "[aout]" -b:a $ABitRate "$DestinationFolder/$file_end.part"
    else
    echo "audio map... OK"
  ./tools/ffmpeg -v error -hide_banner -stats -i "$file" -f mp4 $FrameRate -c:v libx265 -tag:v hvc1 -preset $Preset -pix_fmt $Chroma $Resolution $VBitRate -aspect $AspectRatio -x265-params log-level=error -c:a $AEncoder -ar $SampleRate -ac $Channels -b:a $ABitRate "$DestinationFolder/$file_end.part"
fi

}

OutputFFmpeg()
{
 echo y | ./tools/ffmpeg -ss 00:00:02 -i "$file" -s 320x180 -frames:v 1 -q:v 5 /private/tmp/img.jpg 2>/dev/null &
echo "ONLY:RED"
echo "Progress:0% " &
echo "Files:file://"$file""
echo "Seconds:0"
while IFS= read -d $'\r' -r p; do
  echo "$p"
  fps=${p/' q='*/}
  fps=${fps/*'fps= '/}
  fps=${fps/*'fps='/}
  size="$(./tools/mediainfo --Inform="General;%FileSize/String%" "$DestinationFolder/$file_end.part")"
  size=${size/' '/}
  size=${size/' '/}
  size=${size/'i'*/}
  speed=${p/*speed=/}
  speed=${speed%'x'*}
  speed=${speed/* /}
  speed=${speed:(0):(4)}
  tm=${p/*time=/}
  tm=${tm/ *}
  mss=${tm/*./}
  mss=${mss/' '*/}
  tm=${tm/.*}
  hh=${tm/:*/}
  ss=${tm/*:/}
  mm=${tm%':'*}
  mm=${mm/*:/}

prtth=$(expr $hh \* 3600 2>/dev/null);
prttm=$(expr $mm \* 60 2>/dev/null);
prtt=$(expr $prtth + $prttm + $ss 2>/dev/null)

prth=$(expr $h \* 3600 2>/dev/null);
prtm=$(expr $m \* 60 2>/dev/null);
prt=$(expr $prth + $prtm + $s 2>/dev/null)

pr=$(expr "$prtt""$mss"00 / "$prt""$ms" 2>/dev/null)

tl=$(expr "$prt" - "$prtt" 2>/dev/null);
#tl=`echo "$tl" "$speed" | awk '{print $1/$2}'`;
#tl=${tl/.*/}
tl=$(echo 'scale = 0 ; '$tl' / '$speed'' | bc 2>/dev/null);
    ((tlh=${tl}/3600)) 2>/dev/null
    ((tlm=(${tl}%3600)/60)) 2>/dev/null
    ((tls=${tl}%60)) 2>/dev/null
tl=$(printf "%02d:%02d:%02d\n" $tlh $tlm $tls)
echo "Seconds:$prtt.$mss"

if [[ -n "$pr" ]] && [[ "$pr" -ge 0 ]]; then

echo "Progress:""$pr""% "
echo "FPS:""FPS:              $fps"
echo "Size:""Size:             $size"
echo "Time:""Time:            $tl"
echo "Speed:""Speed:          $speed""x"
echo "Duration:""Duration:      $tm of $duration2"

fi
echo "Name:$file_end.mp4"
done

size="$(./tools/mediainfo --Inform="General;%FileSize/String%" "$DestinationFolder/$file_end.part")"
size=${size/' '/}
size=${size/' '/}
size=${size/'i'*/}

echo "Seconds:$prt"
echo "Progress:100% "
echo "FPS:""FPS:              $fps"
echo "Size:""Size:             $size"
echo "Time:""Time:            $tl"
echo "Speed:""Speed:          $speed""x"
echo "Duration:""Duration:      $duration2 of $duration2"

}


Time()
{
finishTime=$(date -u "+%s")
processedTime=$(expr $finishTime - $startTime)

if [[ $processedTime -gt 3599 ]]; then
    processedTime=$(printf "%dh%dm%ds\n" $((processedTime/3600%3600)) $((processedTime/60%60)) $((processedTime%60)))

elif [[ $processedTime -gt 59 ]]; then
    processedTime=$(printf "%dm%ds\n" $((processedTime/60%60)) $((processedTime%60)))
 else
    processedTime=$(printf "%ds\n" $((processedTime)))
fi

}


Tempfiles()
{
duration1="$(./tools/mediainfo --Inform="General;%Duration/String3%" "$file" | cut -d '.' -f1)"
duration3="$(./tools/mediainfo --Inform="Video;%Duration/String3%" "$file" | cut -d '.' -f1)"
duration4="$(./tools/mediainfo --Inform="Audio;%Duration/String3%" "$file" | cut -d '.' -f1)"
duration2="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -d '.' -f1)"

until [[ "$duration1" = "$duration3" ]] || [[ "$duration1" = "$duration4" ]] || [[ "$duration1" = "$duration2" ]] && [[ "$duration2" ]]
do
duration1="$(./tools/mediainfo --Inform="General;%Duration/String3%" "$file" | cut -d '.' -f1)"
duration2="$(./tools/ffmpeg -i "$file" 2>&1 | grep Duration | cut -d ' ' -f4 | sed s/,// | cut -d '.' -f1)"
duration4="$(./tools/mediainfo --Inform="Audio;%Duration/String3%" "$file" | cut -d '.' -f1)"
duration3="$(./tools/mediainfo --Inform="Video;%Duration/String3%" "$file" | cut -d '.' -f1)"
MessageTempfiles
sleep 2
done
sleep 1

}


Notification()
{
size="$(./tools/mediainfo --Inform="General;%FileSize/String%" "$DestinationFolder/$file_end.mp4")"
size=${size/' '/}
size=${size/' '/}
size=${size/'i'*/}
echo "NOTIFICATION:"$file_end.mp4 Complete" \r"$cod Duration... $duration2 Size... $size""
}



##################################################################################
###### Start script execution routine ############################################
##################################################################################

if [[ -f "$file" ]]; then
echo "Progress:0% "
echo "Info:FFmpeg `./tools/ffmpeg -i 2>&1 | grep -e 'ffmpeg version' | awk '{ print $2,$3 }'`,   `./tools/mediainfo --version | grep -v 'MediaInfo Command line,'`"

startTime=$(date -u "+%s")

FastLaunchPlist="$HOME/Library/Preferences/org.SerhiiHalan.SettingsFastLaunch.plist" &> /dev/null
XMLfile="$(defaults read $FastLaunchPlist XMLfile)"
Wait="$(defaults read $FastLaunchPlist Wait)"
Interlaced="$(defaults read $FastLaunchPlist Interlaced)"
VEncoder="$(defaults read $FastLaunchPlist VEncoder)"
Resolution="$(defaults read $FastLaunchPlist Resolution)"
Preset="$(defaults read $FastLaunchPlist Preset)"
FrameRate="$(defaults read $FastLaunchPlist FrameRate)"
Chroma="$(defaults read $FastLaunchPlist Chroma)"
AEncoder="$(defaults read $FastLaunchPlist AEncoder)"
ABitRate="$(defaults read $FastLaunchPlist ABitRate)"
SampleRate="$(defaults read $FastLaunchPlist SampleRate)"
Channels="$(defaults read $FastLaunchPlist Channels)"
AspectRatio="$(defaults read $FastLaunchPlist AspectRatio)"
VBitRate="$(defaults read $FastLaunchPlist VBitRate)"

    if [[ "$Interlaced" = 0 ]]; then
     Interlaced=""
      else
     Interlaced="-flags +ilme+ildct"
   fi

   if [[ "$Resolution" = "Source" ]]; then
    Resolution=""
     else
    Resolution="-s $Resolution"
   fi
   if [[ "$FrameRate" = "Source" ]]; then
    FrameRate=""
     else
    FrameRate="-r $FrameRate"
   fi
   
   if [[ "$VBitRate" = "Auto" ]]; then
   VBitRate=""
   elif [[ "$VBitRate" = "Source" ]]; then
    VBitRate=`./tools/mediainfo --Inform="Video;%BitRate/String%" "$file" | cut -d "b" -f1  | sed s/" "//g`
      if [[ "$VBitRate" = "" ]]; then
       VBitRate=`./tools/mediainfo --Inform="General;%BitRate/String%" "$file" | cut -d "b" -f1  | sed s/" "//g`
      fi
    VBitRate="-b:v $VBitRate"
   else
    VBitRate="-b:v $VBitRate"
   fi

   if [[ "$AspectRatio" = "Source" ]]; then
   AspectRatio=`./tools/mediainfo --Inform="Video;%DisplayAspectRatio/String%" "$file"`
   fi
   
ext="${file##*.}"
tempfile="${file##*/}"
file_end="${tempfile%.*}"
if [[ `echo "mov qt mp4 mpg4 mpg mpeg mpe m75 m15 mts mkv mxf 3gp m4v avi wm wmv vfw ts flv webm vob asf asx bin dat dav drv f4v gtp mod moov rm rmvd spl vcd vid 3g2 3gp 3gp2 3gpp 3gpp2 dif swf dv m2v m2p m2t mpegts yuv bsf evo exp hdmov hdv mpv mqv" 2>&1 | grep -i $ext` ]]; then
    if [[ $Wait = 1 ]]; then
    Tempfiles
    fi
    echo "Progress:0% "
    count=$(( $count + 1 ))
    Mfile="$file"
    put=INPUT
    Minfo
    Transcoding
    mv "$DestinationFolder/$file_end.part" "$DestinationFolder/$file_end.mp4"
    Time
    Mfile="$DestinationFolder/$file_end.mp4"
    put=OUTPUT
    Minfo
    afplay sound/done.mp3 &> /dev/null &
    echo "Info:Total processed: $processedTime Time: $(date "+%Y-%m-%d %H:%M:%S %z")" & Notification
    echo "Progress:100% "
    sleep 1
else
   mkdir "$MonitoringFolder/Not video files" &> /dev/null
   mv "$MonitoringFolder"/"$file_end.$ext" "$MonitoringFolder/Not video files/"
echo "Info:"$file_end.$ext" Not a video file"
sleep 1
fi

if  [[ "$("$MonitoringFolder"  2>&1  | grep 'Volumes')" ]]; then
Volumes="$(echo "$MonitoringFolder"  | cut -d '/' -f3)"
mv "$file" /Volumes/"$Volumes"/.Trashes/501
else
mv "$file" "$HOME"/.Trash
fi

rm -rf "/private/tmp/img.jpg"
 
for file in "$MonitoringFolder"/*.*; do
break
done

if [[ -f "$file" ]]
then
sleep 1
source scripts/scriptStart
fi

exit
     else

echo "Info:Drag video files to process"
exit
fi
exit
